<?php
/*5hrs
	DealMe UserAccount class
	
	Usage Examples at bottom of page
	
	Handles everything that deals with Users Accounts:
		Creating a new account
		Finding account info
		Updating account info
	
	Bugs:
		$_POST data isn't sanitized or secured
		Update Password doesn't check for pass to change pass $this->update();
		Update Email doesn't check for existing emails $this->update();
		Efficiency on $this->newuser() and $this->update()
			???why make an array outside the class object???
*/

class m_UserAccount{
	/*
		Properties
	*/
	private $accountProperties = array(
	'_id'=>'',
	'name'=>'',
	'password'=>'',
	'location'=>'',
	'valid'=>'',
	'joindate'=>'',
	'lastlogin'=>'',
	'recovery'=>'',
	'time_left'=>''
	);
	
	private $newUser = false;
	private $eHold = "";
	
	/*
		Methods
	*/
	public function __construct($_id=true){
		if($_id === true){
			// new user, blank array for filling
			$this->newUser = true;
			// data array
			$this->accountProperties['joindate'] = getdate();
			// Account/Email validation key
			$this->accountProperties['valid'] = time();
		}elseif($_id){
			$this->set_propertiesArray(m_FindOne::result(m_var::get_database(),m_var::get_userAccount(),array('_id'=>$_id)));
		}
	}
	
	public function set_propertiesArray($array){
		foreach($array as $key => $value){
			if(isset($this->accountProperties[$key])){
				$this->accountProperties[$key] = $value;
			}
		}
	}
	
	public function set_propertiesSingle($key, $value){
		if(isset($this->accountProperties[$key])){
			$this->accountProperties[$key] = $value;
		}
	}
	
	public function get_properties(){
		return $this->accountProperties;
	}
	
	public function save(){
		// Checks if any errors have been thrown first
		if(empty($this->eHold)){
			$hold = array();
			foreach($this->accountProperties as $key => $value){
				if(!empty($value)){
					$hold[$key] = $value;
				}
			}
			
			if($this->newUser){
				m_Save::result(m_var::get_database(),m_var::get_userAccount(),$hold);
				if(!m_Email::registration($hold['_id'],$hold['valid'])){
					$this->error("verification");
				}
			}else{
				m_Update::result(m_var::get_database(),m_var::get_userAccount(),array('_id'=>$this->accountProperties['_id']),array('$set' => $hold));
			}
		}else{
			echo "no save<br> ";
		}
	}
	
	/*
		Form Validation
	*/
	private function password_match($pass1,$pass2){
		if(strcmp($pass1,$pass2) == 0){
			$this->accountProperties['password'] = $this->password_encrypt($pass1);
		}else{
			$this->error("pMatch");
		}
	}
	
	private function password_encrypt($pass){
		return password_hash($pass, PASSWORD_BCRYPT);
	}
	
	private function email_match($email1,$email2){
		if(strcmp($email1,$email2) == 0){
			$this->accountProperties['_id'] = $email1;
		}else{
			$this->error("eMatch");
		}
	}
	
	private function email_validate($email){
		if(filter_var($email,FILTER_VALIDATE_EMAIL) == false){
			$this->error("eFilter");
		}else{
			$this->accountProperties['_id'] = $email;
		}
	}
	
	private function email_inuse($email){
		if(m_FindOne::result(m_var::get_database(),m_var::get_userAccount(),array('_id'=>$email)) == NULL){
			$this->accountProperties['_id'] = $email;
		}else{
			$this->error("emailTaken");
		}
	}
	
	private function blank_check($array){
		foreach($array as $key => $value){
			if(empty($value)){
				$this->error("blank");
				$this->eHold .= $key."<br>";
			}
		}
	}
	
	public function newuser($array){
		if($this->newUser){
			//Password Match
			$this->password_match($array['Password'],$array['Password2']);
			
			//Email
			//$this->email_match($array['Email'],$array['Email2']);
			$this->email_inuse($array['Email']);
			$this->email_validate($array['Email']);
			
			//Location
			$this->accountProperties['location'] = $array['Location'];
			
			// Add Name
			$this->accountProperties['name'] = $array['Name'];
			
			// Blank Entries
			$this->blank_check($array);
		}else{
			$this->error("newuser_validation");
		}
	}
	
	public function update($array){
		if($this->newUser){
			$this->error("newuser_validation");
		}else{
			$this->blank_check($array);
			$this->accountProperties['_id'] = $array['_id'];
			$this->accountProperties['password'] = $this->password_encrypt($array['Password']);
			$this->email_validate($array['Email']);
			$this->accountProperties['name'] = $array['Name'];
		}
	}
	
	/*
		Error Reporting
	*/
	private function error($e){
		switch ($e){
			case "blank":
			$this->eHold .= "No fields can be blank: ";
			break;
			
			case "usertaken":
			$this->eHold .= "Username is already taken.<br>";
			break;
			
			case "pMatch":
			$this->eHold .= "Passwords don't match.<br>";
			break;
			
			case "eMatch":
			$this->eHold .= "Emails don't match.<br>";
			break;
			
			case "eFilter":
			$this->eHold .= "Email Address is not a valid Email. Contact Us[link] if you're having trouble with Email being accepted.<br>";
			break;
			
			case "emailTaken":
			$this->eHold .= "Email Address is in use<br>";
			break;
			
			case "newuser_validation":
			$this->eHold .= "Using wrong method in class.<br>";
			break;
			
			case "verification":
			$this->eHold .="Registration Saved but email not sent. Contact Administration.<br>";
			break;
		}
	}
	
	public function get_error(){
		return $this->eHold;
	}
}
/*New User Test
$UA = array();
$UA['Password'] = isset($_POST['password'])?$_POST['password'] : "";
$UA['Password2'] = isset($_POST['password2'])?$_POST['password2'] : "";
$UA['Name'] = isset($_POST['name'])? $_POST['name']: "";
$UA['Email'] = isset($_POST['email'])? $_POST['email'] : "";
$UA['Email2'] = isset($_POST['email2'])? $_POST['email2']: "";

$UAT = new m_UserAccount();
$UAT->newuser($UA);
$UAT->save();
echo $UAT->get_error();
*/

/*Update User
$UA = array();
$UA['_id'] = ""; //$_SESSION['login']['_id'] !!!--------CHANGE THIS---------!!!
$UA['Password'] = isset($_POST['password'])?$_POST['password'] : "";
$UA['Name'] = isset($_POST['name'])? $_POST['name']: "";
$UA['Email'] = isset($_POST['email'])? $_POST['email'] : "";

$UAT = new m_UserAccount(false);
$UAT->update($UA);
$UAT->save();
echo $UAT->get_error();
*/

/* Find User
$UAT = new m_UserAccount("test");
echo $UAT->get_properties()['key'];
*/
?>